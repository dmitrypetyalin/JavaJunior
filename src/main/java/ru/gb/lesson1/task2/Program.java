package ru.gb.lesson1.task2;

import ru.gb.lesson1.task2.interfaces.*;
import java.util.Scanner;

/**
 * @author PetSoft
 * @date 17.12.2024 14:01
 */
/*Задача 2: Техническое задание на разработку информацилннлй системы UMarket.
Вам доверено спроектировать и реализовать классы предметной области,
которые позволяю в дальнейшем вести разработку ИС со следующим функционалом:
1. Осуществлять учет продовольственных и непродовольственных товаров, которыми торгует UMarket.
2. Предоставлять покупателям возможность фильтрации прдовольственных товаров по слндующим видам:
    - снеки;
    - полуфабрикаты;
    - прожукты для приготовления;
    - все продовольственные продукты.
3. Формировать онлайн корзину из прожовольственных товаров.
4. Осуществлять балансировку онлайн корзины с целью получения такого набора продуктов питания,
котоорый включает все основные питательные элементы.

Осбенности бизнес-логики сервиса UMarket.

Модуль ондайн покупок должен осуществлять контроль за попадающими в покупательскую корзину продуктами, а именно:
    - в онлайн корзину можно добавить только продовольственные товары;
    - в зависимости от желания покупателя, в онлайн корзине могут находиться как все присутствующие в UMarket
    продовольственные товары, так и исключительно товары той категории,
    которую выбрал покупатель посредством настроек фильтрации (фильтрация по видам продовольственных товаров).

Необходимо предусмотреть типобезопасность онлайн корзины, так как в момент "автоматической балансировки" она
должна пополняться прдовольственными товарами из списка товаров UMarket.
Необходимо учесть, что в случае формирования онлайн корзины конкретного вида продовольственных товаров,
дополнять корзину необходимо товарами именно из выбранной покупателем категории продовольственных товаров.

С целью упрощения механизма балансировки онлайн корзины, бкдем считать, что каждый продовольственный продукт
одержит всего лишь один питательный элемент: белки, жиры, углеводы.
Следовательно, есть вероятность, что выбранные товары представителями одного и того же питательного элемента
(например, углеводные).
В свою очередь, балансировка делает так, чтобы в корзине были представлены все питательные элементы.
* */
public class Program {

    private final static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        UMarket market = new UMarket();
        System.out.println("Welcome to UMarket");

        while (true) {
            System.out.println("===============================================");
            System.out.println("0 - Завершение работы приложения");
            System.out.println("1 - Отобразить полный список товаров");
            System.out.println("2 - Сформировать корзину из снеков");
            System.out.println("3 - Сформировать корзину из полуфабрикатов");
            System.out.println("4 - Сформировать корзину из продуктов для приготовления");
            System.out.println("5 - Сформировать корзину из любых продовольственных товаров");
            System.out.println("Выерите пункт меню: ");

            if (scanner.hasNextInt()) {
                int no = scanner.nextInt();
                scanner.nextLine();
                switch (no) {
                    case 0 -> {
                        System.out.println("Завершение работы приложения.");
                        return;
                    }
                    case 1 -> {
                        System.out.println("Список товаров:");
                        market.printThings(Thing.class);
                    }
                    case 2 -> createCart(Snack.class, market);
                    case 3 -> createCart(SemiFinishedFood.class, market);
                    case 4 -> createCart(HealthyFood.class, market);
                    case 5 -> createCart(Food.class, market);
                }
            } else {
                System.out.println("Некорректный пункт меню. \nПожалуйста, повторите попытку ввода.");
                scanner.nextLine();
            }
        }
    }

    static <T extends Food> void createCart(Class<T> clazz, UMarket market) {
        Cart<T> cart = new Cart<>(clazz, market);
        while (true) {
            System.out.println("Список доступных товаров: ");
            System.out.println("[0] Завершение формирования корзины + балансировка");
            market.printThings(clazz);
            System.out.println("Укажите номер товара для добавления: ");

            if (scanner.hasNextInt()) {
                int no = scanner.nextInt();
                scanner.nextLine();
                if (no == 0) {
                    cart.cartBalancing();
                    System.out.println("Ваша корзина содержит продукты: ");
                    cart.printFoodStuffs();
                    return;
                } else {
                    T thing = market.getThingByIndex(clazz, no);
                    if (thing == null) {
                        System.out.println("Некорректный номер товара. \nПожалуйста, повторите попытку ввода.");
                        continue;
                    }
                    cart.getFoodStuffs().add(thing);
                    System.out.println("Товар успешно добавлен в корзину.");
                    System.out.println("Ваша корзина содержит продукты: ");
                    cart.printFoodStuffs();
                }
            } else {
                System.out.println("Некорректный пункт меню. \nПожалуйста, повторите попытку ввода.");
                scanner.nextLine();
            }
        }
    }
}















